define("dummy/app",["ember","ember/resolver","ember/load-initializers","dummy/config/environment","exports"],function(a,e,t,r,n){"use strict";var s=a["default"],o=e["default"],l=t["default"],i=r["default"];s.MODEL_FACTORY_INJECTIONS=!0;var d=s.Application.extend({modulePrefix:i.modulePrefix,podModulePrefix:i.podModulePrefix,Resolver:o});l(d,i.modulePrefix),n["default"]=d}),define("dummy/components/morris-charts",["ember","ember-cli-morris-charts/components/morris-charts","exports"],function(a,e,t){"use strict";var r=(a["default"],e["default"]);t["default"]=r}),define("dummy/controllers/application",["ember","exports"],function(a,e){"use strict";var t=a["default"];e["default"]=t.Controller.extend({xKeySel:["y","a","b"],areaXKey:"y",lineXKey:"y",barXKey:"y",yKeys:["a","b"],labels:["Series A","Series B"],areaData:[{y:"2006",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2007",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2008",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2009",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2010",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10}],lineData:[{y:"2006",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2007",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2008",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2009",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2010",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10}],barData:[{y:"2006",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2007",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2008",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2009",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10},{y:"2010",a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10}],donutData:[{label:"Download Sales",value:12},{label:"In-Store Sales",value:30},{label:"Mail-Order Sales",value:20}],actions:{addData:function(a){var e;e="donutData"!==a?{y:(Math.floor(51*Math.random())+2e3).toString(),a:Math.floor(91*Math.random())+10,b:Math.floor(91*Math.random())+10}:{label:"New sequence"+(Math.floor(51*Math.random())+2e3).toString(),value:Math.floor(91*Math.random())+10};var t=this.get(a);t.pushObject(e)}}})}),define("dummy/initializers/export-application-global",["ember","dummy/config/environment","exports"],function(a,e,t){"use strict";function r(a,e){var t=n.String.classify(s.modulePrefix);s.exportApplicationGlobal&&(window[t]=e)}var n=a["default"],s=e["default"];t.initialize=r,t["default"]={name:"export-application-global",initialize:r}}),define("dummy/router",["ember","dummy/config/environment","exports"],function(a,e,t){"use strict";var r=a["default"],n=e["default"],s=r.Router.extend({location:n.locationType});s.map(function(){}),t["default"]=s}),define("dummy/templates/application",["ember","exports"],function(a,e){"use strict";var t=a["default"];e["default"]=t.Handlebars.template(function(a,e,r,n,s){this.compilerInfo=[4,">= 1.0.0"],r=this.merge(r,t.Handlebars.helpers),s=s||{};var o,l,i="",d=r.helperMissing,h=this.escapeExpression;return s.buffer.push('<div class="jumbotron">\n    <div class="container">\n        <h1>Ember CLI Morris Charts</h1>\n        <p>This is an ember cli addon to easily create awesome charts using <a href="https://github.com/morrisjs/morris.js" target="_blank">morris charts jquery plugin</a>.\n        <br /><br />\n        The plugin has been wrapped in this ember addon so you can use it with your controller or model properties, whenever data is updated, the chart will also update.</p>\n        <p><a class="btn btn-primary btn-lg" href="#start" role="button">Using in your project »</a> <a class="btn btn-warning btn-lg" href="#examples" role="button">Examples »</a> <a class="btn btn-warning btn-lg" href="https://github.com/matheusdavidson/ember-cli-morris-charts" target="_blank" role="button">View on github »</a></p>\n    </div>\n</div>\n<div class="container">\n    <div class="row" id="start">\n        <div class="col-sm-12">\n            <div class="page-header">\n                <h1>Including Morris charts in your project</h1>\n            </div>\n            <div class="alert alert-warning" role="alert"><b>jQuery must be loaded in your project!</b> in next releases this will be done automatically</div>\n            Is very easy to use in your ember-cli project, just go to your project folder and run this command:\n            <br />\n            <code>\n            npm install --save-dev ember-cli-morris-charts\n            </code><br />\n            Thats all! You\'re ready to go!\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-sm-12">\n            <div class="page-header">\n                <h1>How do i use?</h1>\n            </div>\n            For now, only the basic options are working, but i will implement everything very soon!<br />\n            There are 4 types of charts available(Area, Line, Bar, Donut), acording to <a href="http://morrisjs.github.io/morris.js/#what-next" target="_blank">morris charts docs</a>:<br />\n            <h4>Area</h4>\n            <code>&#123&#123morris-charts type="Area" data=DATA xKey=XKEY yKeys=YKEYS labels=LABELS resize=RESIZE&#125;&#125;</code>\n            <h4>Line</h4>\n            <code>&#123&#123morris-charts type="Line" data=DATA xKey=XKEY yKeys=YKEYS labels=LABELS resize=RESIZE&#125;&#125;</code>\n            <h4>Bar</h4>\n            <code>&#123&#123morris-charts type="Bar" data=DATA xKey=XKEY yKeys=YKEYS labels=LABELS resize=RESIZE&#125;&#125;</code>\n            <h4>Donut</h4>\n            <code>&#123&#123morris-charts type="Donut" data=DATA resize=RESIZE&#125;&#125;</code>\n            <br /><br />\n            <i>You can use the tags above in your handlebars templates and provide extra properties (like data, xKey, yKeys, labels and resize)in your <b>model</b> or <b>controllers.</b></i>\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-sm-12">\n            <div class="page-header">\n                <h1>Available options</h1>\n            </div>\n            <div class="alert alert-info" role="alert"><b>The chart will update whenever you change any of this properties</b></div>\n            <h4>TYPE</h4>\n            <i>String(Area, Line, Bar, Donut)</i>\n            <h4>DATA</h4>\n            <i>Array, refer to morris chart docs according to TYPE</i>\n            <h4>XKEY</h4>\n            <i>String, should be one of your DATA array key, refer to morris chart docs</i>\n            <h4>yKEYS</h4>\n            <i>Array, should be an array with your DATA keys that you want displayed on y series, refer to morris chart docs</i>\n            <h4>LABELS</h4>\n            <i>Array, Label for each key in your y series, refer to morris chart docs</i>\n            <h4>RESIZE</h4>\n            <i>Bool, True will make the chart responsive, defaults to false(not responsive)</i>\n        </div>\n    </div>\n    <div class="row" id="examples">\n        <div class="col-sm-12">\n            <div class="page-header">\n                <h1>Examples</h1>\n            </div>\n            <div class="panel panel-default">\n                <div class="panel-heading">\n                    <div class="panel-title">\n                        Area\n                    </div>\n                </div>\n                <div class="panel-body">\n                    <div class="row">\n                        <div class="col-sm-9">\n                            '),s.buffer.push(h((o=r["morris-charts"]||e&&e["morris-charts"],l={hash:{type:"Area",data:"areaData",xKey:"areaXKey",yKeys:"yKeys",labels:"labels",resize:!0},hashTypes:{type:"STRING",data:"ID",xKey:"ID",yKeys:"ID",labels:"ID",resize:"BOOLEAN"},hashContexts:{type:e,data:e,xKey:e,yKeys:e,labels:e,resize:e},contexts:[],types:[],data:s},o?o.call(e,l):d.call(e,"morris-charts",l)))),s.buffer.push('\n                        </div>\n                        <div class="col-sm-3">\n                            Selected options <small>try to update these</small>\n                            <br /><br />\n                            <label>yKey</label>\n                            '),s.buffer.push(h(r.view.call(e,"Ember.Select",{hash:{content:"xKeySel","class":"form-control",value:"areaXKey"},hashTypes:{content:"ID","class":"STRING",value:"ID"},hashContexts:{content:e,"class":e,value:e},contexts:[e],types:["ID"],data:s}))),s.buffer.push('\n                            <br /><br />\n                            <label>Inserir novo valor</label>\n                            <br />\n                            <button type="button" class="btn btn-primary" '),s.buffer.push(h(r.action.call(e,"addData","areaData",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","STRING"],data:s}))),s.buffer.push('>atualizar dados</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="panel panel-default">\n                <div class="panel-heading">\n                    <div class="panel-title">\n                        Line\n                    </div>\n                </div>\n                <div class="panel-body">\n                    <div class="row">\n                        <div class="col-sm-9">\n                            '),s.buffer.push(h((o=r["morris-charts"]||e&&e["morris-charts"],l={hash:{type:"Line",data:"lineData",xKey:"lineXKey",yKeys:"yKeys",labels:"labels",resize:!0},hashTypes:{type:"STRING",data:"ID",xKey:"ID",yKeys:"ID",labels:"ID",resize:"BOOLEAN"},hashContexts:{type:e,data:e,xKey:e,yKeys:e,labels:e,resize:e},contexts:[],types:[],data:s},o?o.call(e,l):d.call(e,"morris-charts",l)))),s.buffer.push('\n                        </div>\n                        <div class="col-sm-3">\n                            Selected options <small>try to update these</small>\n                            <br /><br />\n                            <label>yKey</label>\n                            '),s.buffer.push(h(r.view.call(e,"Ember.Select",{hash:{content:"xKeySel","class":"form-control",value:"lineXKey"},hashTypes:{content:"ID","class":"STRING",value:"ID"},hashContexts:{content:e,"class":e,value:e},contexts:[e],types:["ID"],data:s}))),s.buffer.push('\n                            <br /><br />\n                            <label>Inserir novo valor</label>\n                            <br />\n                            <button type="button" class="btn btn-primary" '),s.buffer.push(h(r.action.call(e,"addData","lineData",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","STRING"],data:s}))),s.buffer.push('>atualizar dados</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="panel panel-default">\n                <div class="panel-heading">\n                    <div class="panel-title">\n                        Bar\n                    </div>\n                </div>\n                <div class="panel-body">\n                    <div class="row">\n                        <div class="col-sm-9">\n                            '),s.buffer.push(h((o=r["morris-charts"]||e&&e["morris-charts"],l={hash:{type:"Bar",data:"barData",xKey:"barXKey",yKeys:"yKeys",labels:"labels",resize:!0},hashTypes:{type:"STRING",data:"ID",xKey:"ID",yKeys:"ID",labels:"ID",resize:"BOOLEAN"},hashContexts:{type:e,data:e,xKey:e,yKeys:e,labels:e,resize:e},contexts:[],types:[],data:s},o?o.call(e,l):d.call(e,"morris-charts",l)))),s.buffer.push('\n                        </div>\n                        <div class="col-sm-3">\n                            Selected options <small>try to update these</small>\n                            <br /><br />\n                            <label>yKey</label>\n                            '),s.buffer.push(h(r.view.call(e,"Ember.Select",{hash:{content:"xKeySel","class":"form-control",value:"barXKey"},hashTypes:{content:"ID","class":"STRING",value:"ID"},hashContexts:{content:e,"class":e,value:e},contexts:[e],types:["ID"],data:s}))),s.buffer.push('\n                            <br /><br />\n                            <label>Inserir novo valor</label>\n                            <br />\n                            <button type="button" class="btn btn-primary" '),s.buffer.push(h(r.action.call(e,"addData","barData",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","STRING"],data:s}))),s.buffer.push('>atualizar dados</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class="panel panel-default">\n                <div class="panel-heading">\n                    <div class="panel-title">\n                        Donut\n                    </div>\n                </div>\n                <div class="panel-body">\n                    <div class="row">\n                        <div class="col-sm-9">\n                            '),s.buffer.push(h((o=r["morris-charts"]||e&&e["morris-charts"],l={hash:{type:"Donut",data:"donutData",resize:!0},hashTypes:{type:"STRING",data:"ID",resize:"BOOLEAN"},hashContexts:{type:e,data:e,resize:e},contexts:[],types:[],data:s},o?o.call(e,l):d.call(e,"morris-charts",l)))),s.buffer.push('\n                        </div>\n                        <div class="col-sm-3">\n                            Selected options <small>try to update these</small>\n                            <br /><br />\n                            <label>Inserir novo valor</label>\n                            <br />\n                            <button type="button" class="btn btn-primary" '),s.buffer.push(h(r.action.call(e,"addData","donutData",{hash:{},hashTypes:{},hashContexts:{},contexts:[e,e],types:["STRING","STRING"],data:s}))),s.buffer.push('>atualizar dados</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<footer class="footer">\n    <div class="container">\n        <p class="pull-right"><a href="https://www.facebook.com/matheusdavidson" target="_blank">facebook</a> - <a href="https://github.com/matheusdavidson" target="_blank">github</a></p>\n        <p class="text-muted pull-left">Developed by Matheus Davidson</p>\n    </div>\n</footer>'),i})}),define("dummy/templates/components/morris-charts",["ember","exports"],function(a,e){"use strict";var t=a["default"];e["default"]=t.Handlebars.template(function(a,e,r,n,s){this.compilerInfo=[4,">= 1.0.0"],r=this.merge(r,t.Handlebars.helpers),s=s||{};var o;o=r._triageMustache.call(e,"yield",{hash:{},hashTypes:{},hashContexts:{},contexts:[e],types:["ID"],data:s}),s.buffer.push(o||0===o?o:"")})}),define("dummy/config/environment",["ember"],function(a){var e="dummy";try{var t=e+"/config/environment",r=a["default"].$('meta[name="'+t+'"]').attr("content"),n=JSON.parse(unescape(r));return{"default":n}}catch(s){throw new Error('Could not read config from meta tag with name "'+t+'".')}}),runningTests?require("dummy/tests/test-helper"):require("dummy/app")["default"].create({});